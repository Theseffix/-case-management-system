@page "/program"
@using ITHSManagement.Services
@using ITHSManagement.Models
@inject IProgrammeService context
@inject TaskService serv

<h1>Utbildningar</h1>

<EditForm Model="@program" class="clr-form clr-form-compact">
    <Text @bind-Value="program.ProgramName" Label="Utbildningsnamn"></Text>
    <Text @bind-Value="program.YhNumber" Label="YH-Nummer"></Text>
    <Text @bind-Value="program.Description" Label="Beskrivning"></Text>
    <clr-input-container class="clr-form-control clr-row " blazority="">
        <label class="clr-control-label clr-col-12 clr-col-md-2" for="clr-date-1">Startdatum</label>
        <div class="clr-control-container clr-col-md-10 clr-col-12 ">
            <InputDate id="clr-date-1" class="clr-input valid" @bind-Value=program.StartDate ParsingErrorMessage="Must be a date" />
        </div>
    </clr-input-container>
    <clr-input-container class="clr-form-control clr-row " blazority="">
        <label class="clr-control-label clr-col-12 clr-col-md-2" for="clr-date-2">Slutdatum</label>
        <div class="clr-control-container clr-col-md-10 clr-col-12 ">
            <InputDate id="clr-date-2" class="clr-input valid" @bind-Value=program.EndDate ParsingErrorMessage="Must be a date" />
        </div>
    </clr-input-container>
    <Button Small="true" @onclick="AddProgram" disabled="@IsTaskRunning">@add2ProgramButton</Button>

</EditForm>


@code {

    private Programme program = new Programme();

    bool IsTaskRunning = false;
    string add2ProgramButton = "Lägg till";

    private async Task AddProgram()
    {

        IsTaskRunning = true;
        await context.Insert(program);
        IsTaskRunning = false;
        StateHasChanged();
        program = new Programme();

    }
}
