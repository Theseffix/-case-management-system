@page "/studentprofile/{PersonId:int}"
@using ITHSManagement.Data
@using ITHSManagement.Models
@using ITHSManagement.Services;
@using System.IO;

@inject StudentService StudentContext
@inject StudentRepository Context
@inject TaskRepository TaskDb
@inject FileIO context
@inject NavigationManager NavigationManager
@inject TaskService TaskServ
@inject AddressRepository AddressDb
@inject ContactRepository ContactDb


<h1>
    @Student.Id : @Student.FirstName @Student.LastName

    <span style="float: right;">
        <Button Label="Spara" hidden="@HiddenSaveButton" OnClick="() => EditStudent()"></Button>
        <Button Icon="Edit" hidden="@HiddenEditButton" Variant="Primary" OnClick="() => EditStudentButtons()"></Button>
        <Button Label="TA BORT" Variant="Danger" Icon="warning-standard" OnClick="()  => DeleteStudent(Student.Id)"></Button>
    </span>
</h1>
<Card>
    <CardBody>
        <Tabs>
            <Tab>
                <Header>Kontakt</Header>
                <ChildContent>
                    <LayoutView>
                        <div style="width:49%;float:right;margin-right:6px;margin-bottom:6px;margin-top:12px;">
                            <br />
                            <Datagrid TRowData="TaskItem" Items="TaskList" RowClicked="(u) => RowClickedTask(u)" RowClass="DynamicRowClass" Placeholder="För tillfället är det väldigt tomt här.">
                                <DatagridColumn Title="Task-Lista" TRowData="TaskItem" Field="c => c.Title" CanSort="true" />
                                <DatagridFooter TRowData="TaskItem">
                                    <DatagridFooterDescription TRowData="TaskItem">@TaskList.Count aktiva Tasks.</DatagridFooterDescription>
                                </DatagridFooter>
                                <Button style="float:right" Variant="Primary" Icon="Plus" OnClick="e => ModalMd = true"></Button>
                            </Datagrid>
                        </div>
                        <cds-divider orientation="Horizontal"></cds-divider>
                        <div cds-layout="Horizontal gap:md" style="width:49%;float:left">
                            <br />
                            <table class="table table-vertical" style="width:95%;margin-left:6px;margin-bottom:6px;">
                                <tbody>
                                    <tr>
                                        <td style="width:25%">Id</td>
                                        <td>@Student.Id</td>
                                    </tr>
                                    <tr>
                                        <td style="width:25%">Förnamn</td>
                                        <td>
                                            <input maxlength="35" disabled="@EditStudentBool" style="resize:none; height:20px;" @bind="@Student.FirstName"></input>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="width:25%">Efternamn</td>
                                        <td>
                                            <input maxlength="35" disabled="@EditStudentBool" style="resize:none; height:20px" @bind="@Student.LastName"></input>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="width:25%">Födelsedag</td>
                                        <td>
                                            <input type="date" disabled="@EditStudentBool" style="resize:none; height:20px" @bind="@Student.Birthdate" />
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                            <table class="table table-vertical" style="width:95%;margin-left:6px;margin-bottom:6px;">
                                <tbody>
                                    @foreach (var contact in PhoneInfos)
                                    {
                                        <tr>
                                            <td style="width:25%">@contact.ContactType</td>
                                            <td>
                                                <input type="number" maxlength="35" disabled="@EditStudentBool" style="resize:none; height:20px;" @bind="contact.Contact"/>
                                                <Button hidden="@HiddenSaveButton" Small="true" Icon="Close" Variant="Danger" style="float:right;margin-right:1%" OnClick="e => DeletePhoneNumber(contact.Id)"></Button>
                                            </td>
                                        </tr>
                                    }
                                    <tr hidden="@HiddenSaveButton">
                                        <td style="width:25%">
                                            Nytt telefonnummer
                                        </td>
                                        <td>
                                            <input type="number" maxlength="35" disabled="@EditStudentBool" style="resize:none; height:20px;" @bind="@NewPhoneNr" />
                                            <Button Small="true" Icon="Plus" Variant="Primary" style="float:right;margin-right:1%" OnClick="AddNewPhoneNumber"></Button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                            <table class="table table-vertical" style="width:95%;margin-left:6px;margin-bottom:6px;">
                                <tbody>
                                    @foreach (var contact in EmailInfos)
                                    {
                                        <tr>
                                            <td style="width:25%">@contact.ContactType</td>
                                            <td>
                                                <input id="@contact.Id" maxlength="35" disabled="@EditStudentBool" style="resize:none; height:20px;" @bind="contact.Contact" />
                                                <Button hidden="@HiddenSaveButton" Small="true" Icon="Close" Variant="Danger" style="float:right;margin-right:1%" OnClick="e => DeleteEmail(contact.Id)"></Button>
                                            </td>
                                        </tr>
                                    }
                                    <tr hidden="@HiddenSaveButton">
                                        <td style="width:25%">
                                            Ny Epost
                                        </td>
                                        <td>
                                            <input maxlength="35" disabled="@EditStudentBool" style="resize:none; height:20px;" @bind="@NewEmail" />
                                            <Button Small="true" Icon="Plus" Variant="Primary" style="float:right;margin-right:1%" OnClick="AddNewEmail"></Button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </LayoutView>
                </ChildContent>
            </Tab>
            <Tab>
                <Header>Länkar</Header>
                <ChildContent>
                    <LayoutView>
                        <div>
                            <p>

                            </p>
                        </div>
                    </LayoutView>
                </ChildContent>
            </Tab>
        </Tabs>
        <div style="height:1000px"></div>
    </CardBody>
</Card>


<Modal Open="ModalMd" Closable="false" StaticBackdrop="true">
    <ModalTitle>Skapa Nytt Ärende</ModalTitle>
    <ModalBody>
        <Form style="width:100%" Model="@model">
            <table style="width:100%">
                <tr>
                    <td><h5 style="align-self:start;" class=".p4">Titel</h5></td>
                </tr>
                <tr>
                    <td style="width:100%" colspan="2" align="center">
                        <Text maxlength="35" style="width:100%" @bind-Value="model.Title" />
                    </td>
                </tr>
                <tr margin-bottom:20px>
                    <td>
                        <h5 class=".p4">Startdatum</h5>
                        <input type="date" @bind="model.StartDate" />
                    </td>
                    <td>
                        <h5 class=".p4">Slutdatum</h5>
                        <input type="date" @bind="model.EndDate" />
                    </td>
                </tr>
                <tr margin-bottom:500px>
                    <td>
                        <h5 class=".p4">Prioritet</h5>
                        <Combobox Items="@priorities" @bind-SelectedItem="selectedPriority">
                        </Combobox>
                    </td>
                    <td>
                        <h5 class=".p4">Konsekvens</h5>
                        <Combobox Items="@consequences" @bind-SelectedItem="selectedConsequence">
                        </Combobox>
                    </td>
                </tr>
            </table>
            <h5 class=".p4">Beskrivning</h5>
            <Textarea @bind-Value="model.Description" style="resize:none;height:200px;width:100%">...</Textarea>
        </Form>
    </ModalBody>

    <ModalFooter>
        <Button Variant="Outline" OnClick="e => ModalMd = false">AVBRYT</Button>
        <Button Variant="Primary" OnClick="e => AddTask()">SKAPA</Button>
    </ModalFooter>
</Modal>


@code {
    [Inject]
    StudentService ProgramContext { get; set; }

    List<Address> studentAddress = new List<Address>();

    private bool EditStudentBool = true;
    private bool HiddenEditButton = false;
    private bool HiddenSaveButton = true;

    //string studentStreet = "", studentCity = "", studentZipcode = "";

    public bool EditStudentModalVisible { get; set; }

    private List<ContactInfo> PhoneInfos = new List<ContactInfo>();
    private string NewPhoneNr { get; set; }
    private List<ContactInfo> EmailInfos = new List<ContactInfo>();
    private string NewEmail { get; set; }

    [Parameter]
    public int PersonId { get; set; }
    private Student Student = new Student();
    private Person Person = new Person();
    private TaskItem LastClickedRow = new TaskItem();
    private List<TaskItem> TaskList = new List<TaskItem>();
    string[] priorities = { "Ej Prio", "Låg", "Medel", "Hög", "Omedelbar" };
    string selectedPriority = "Medel";
    string[] consequences = { "Ingen", "Låg", "Medel", "Hög", "Dödlig" };
    string selectedConsequence = "Medel";


    //Modal code
    public bool ModalMd { get; set; }
    private DemoBasicModel model = new DemoBasicModel();
    public FixedMode Mode { get; set; } = FixedMode.All;

    public class DemoBasicModel
    {
        public string Title { get; set; }
        public string Description { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public int Priority { get; set; } //How imprtant (1-5)
        public int Consequence { get; set; } //How bad if not finished (1-5)
        public int UserID { get; set; }
    }

    private async Task DeleteEmail(int id)
    {
        ContactInfo c = EmailInfos.Where(e => e.Id == id).SingleOrDefault();
        await ContactDb.Delete(c);
        EmailInfos = (await StudentContext.GetContactInfoFromStudent(PersonId)).Where(u => u.ContactType == ContactTypeEnum.Epost).ToList();
        StateHasChanged();
    }
    private async Task DeletePhoneNumber(int id)
    {
        ContactInfo c = PhoneInfos.Where(e => e.Id == id).SingleOrDefault();
        await ContactDb.Delete(c);
        PhoneInfos = (await StudentContext.GetContactInfoFromStudent(PersonId)).Where(u => u.ContactType == ContactTypeEnum.Telefon).ToList();
        StateHasChanged();
    }

    private async Task AddNewPhoneNumber()
    {
        ContactInfo c = new ContactInfo();
        c.ContactType = ContactTypeEnum.Telefon;
        c.Contact = NewPhoneNr;
        c.UserId = Student.Id;

        await ContactDb.Insert(c);
        PhoneInfos = (await StudentContext.GetContactInfoFromStudent(PersonId)).Where(u => u.ContactType == ContactTypeEnum.Telefon).ToList();
        StateHasChanged();
        NewPhoneNr = "";

    }

    private async Task AddNewEmail()
    {
        ContactInfo c = new ContactInfo();
        c.ContactType = ContactTypeEnum.Epost;
        c.Contact = NewEmail;
        c.UserId = Student.Id;

        await ContactDb.Insert(c);
        EmailInfos = (await StudentContext.GetContactInfoFromStudent(PersonId)).Where(u => u.ContactType == ContactTypeEnum.Epost).ToList();
        StateHasChanged();
        NewEmail = "";

    }

    private async Task AddTask()
    {
        TaskItem t = new TaskItem();

        t.Title = model.Title;
        t.CreationDate = DateTime.Now;
        t.Description = model.Description;
        t.StartDate = model.StartDate;
        t.EndDate = model.EndDate;
        t.Status = "Aktiv";
        t.UpdateCount = 0;

        if (selectedPriority == "Ej Prio")
        {
            t.Priority = 1;
        }
        else if (selectedPriority == "Låg")
        {
            t.Priority = 2;
        }
        else if (selectedPriority == "Medel")
        {
            t.Priority = 3;
        }
        else if (selectedPriority == "Hög")
        {
            t.Priority = 4;
        }
        else if (selectedPriority == "Omedelbar")
        {
            t.Priority = 5;
        }

        if (selectedConsequence == "Ingen")
        {
            t.Consequence = 1;
        }
        else if (selectedConsequence == "Låg")
        {
            t.Consequence = 2;
        }
        else if (selectedConsequence == "Medel")
        {
            t.Consequence = 3;
        }
        else if (selectedConsequence == "Hög")
        {
            t.Consequence = 4;
        }
        else if (selectedConsequence == "Dödlig")
        {
            t.Consequence = 5;
        }

        await TaskServ.CreateTaskUser(t, PersonId);

        TaskList = TaskDb.GetAllTasksById(PersonId);
        StateHasChanged();
        ModalMd = false;
    }

    public void EditStudentButtons()
    {
        HiddenEditButton = true;
        HiddenSaveButton = false;
        EditStudentBool = false;
    }

    public void EditStudentButtonsInverted()
    {
        HiddenEditButton = false;
        HiddenSaveButton = true;
        EditStudentBool = true;
    }

    public async Task EditStudent()
    {
        if (NewPhoneNr != "" && NewPhoneNr != null)
        {
            await AddNewPhoneNumber();
        }

        if (NewEmail != "" && NewEmail != null)
        {
            await AddNewEmail();
        }

        NewPhoneNr = "";
        NewEmail = "";

        HiddenEditButton = false;
        HiddenSaveButton = true;
        EditStudentBool = true;

        Student s = new Student();
        s.Id = Student.Id;
        s.FirstName = Student.FirstName;
        s.LastName = Student.LastName;
        s.Birthdate = Student.Birthdate;
        await Context.Update(s);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        //studentAddress = AddressDb.GetAllAddressesById(Student.Id);
        Student = (await Context.GetByID(PersonId));
        PhoneInfos = (await StudentContext.GetContactInfoFromStudent(PersonId)).Where(u => u.ContactType == ContactTypeEnum.Telefon).ToList();
        EmailInfos = (await StudentContext.GetContactInfoFromStudent(PersonId)).Where(u => u.ContactType == ContactTypeEnum.Epost).ToList();
        TaskList = TaskDb.GetAllTasksById(PersonId);
        model.StartDate = DateTime.Now;
        model.EndDate = DateTime.Now.AddDays(7);
    }

    //Task - data grid
    public List<TaskItem> tasks = new List<TaskItem>();

    public void RowClicked(Blazority.Shared.MouseEventData<TaskItem> e)
    {
        LastClickedRow = e.Data;
        NavigationManager.NavigateTo($"studentprofile/{e.Data.Id}");
    }

    public void RowClickedTask(Blazority.Shared.MouseEventData<TaskItem> e)
    {
        LastClickedRow = e.Data;
        NavigationManager.NavigateTo($"taskprofile/{e.Data.Id}");
    }

    public string DynamicRowClass(TaskItem row, int index)
    {
        // NOTE: row-selected class is a built-in datagrid class
        return row == LastClickedRow ? "row-selected" : "";
    }

    private async Task DeleteStudent(int StudentId)
    {
        await ProgramContext.Delete(StudentId);
        StateHasChanged();
        NavigationManager.NavigateTo($"fetchStudent");
    }

    public class EditStudentInput
    {
        public Student student { get; set; }
        public Address address { get; set; }
    }
}